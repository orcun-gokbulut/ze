/*ZE_POST_PROCESSOR_START(License)*/
//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
//  MapResource.h - Zinek Engine v0.05.00 Build 1024 Source Code                                 
// -------------------------------------------------------------------------------- //
//  Copyright (c) 2007-2009 Y. Orçun GÖKBULUT. All rights reserved.                 //
//                                                                                  //
//                 READ TERMS BELLOW BEFORE TAKING ANY ACTION !                     //
//                                                                                  //
//  These coded instructions, statements, and computer programs contain             //
//  unpublished proprietary information belongs to Y. Orçun GÖKBULUT and they are   //
//  protected by international copyright laws. This file is intellectual property   //
//  of the Y. Orçun GÖKBULUT. Storing this file, using this file, changing content  //
//  of this file, copying or duplicating this file, compiling this file, publishing // 
//  this file to anykind media or network, editing  this file, selling this file,   //
//  booking this file, reading this file are probited without notice and written    //
//  permision of Y. Orçun GÖKBULUT.                                                 //
//  These terms at above can only be changed by Y. Orçun GÖKBULUT.                  //
//                                                                                  //
//  Contact Information:                                                            //
//     Adress : Zinek Code House & Game Studio                                      //                                             
//              Aydinlar Mahallesi.                                                 //
//              Mimar Sokak. 33/5                                                   //
//              06450  Ankara/TURKEY                                                //
//     Phone  : +90 (533) 734 21 22                                                 //
//     E-Mail : contact@zinekengine.com                                             //
//     WWW    : http://www.zinekengine.com                                          //
//                                                                                  //
//*                                                                                *//
//  DESCRIPTION         :                                                           //
//  AUTHOR(S)           : Y. Orçun GÖKBULUT                                         //
//*                                                                                *//
//////////////////////////////////////////////////////////////////////////////////////
/*ZE_POST_PROCESSOR_END()*/

float4	  MaterialParams0			 : register(c0);
float4	  MaterialParams1			 : register(c1);
float4	  MaterialParams2			 : register(c2);
float4	  MaterialParams3			 : register(c3);
float4	  MaterialParams4			 : register(c4);

#define	  MaterialAmbientColor         MaterialParams0.xyz
#define	  MaterialOpacity			   MaterialParams0.w
#define	  MaterialDiffuseColor         MaterialParams1.xyz
#define	  MaterialSpecularColor        MaterialParams2.xyz
#define	  MaterialSpecularFactor	   MaterialParams2.w
#define	  MaterialEmmisiveColor        MaterialParams3.xyz
#define	  MaterialEmmisiveFactor	   MaterialParams3.w
#define	  MaterialReflectionFactor	   MaterialParams4.x
#define	  MaterialRefractionFactor     MaterialParams4.y;
#define	  MaterialDetailMapTiling      MaterialParams4.zw;

float4    LightColor                 : register(c12);
float     LightIntensity             : register(c13);

// General Material Properties 
sampler   DiffuseMap                 : register(s0);
sampler   NormalMap                  : register(s1);
sampler	  ParallaxMap				 : register(s2);
sampler   SpecularMap                : register(s3);
sampler   OpacityMap				 : register(s4);
sampler   DetailDiffuseMap           : register(s5);
sampler   DetailNormalMap            : register(s6);

// PreLightning Material Properties
sampler   EmmisiveMap                : register(s7);
sampler	  ReflectionMap				 : register(s8);
sampler   RefractionMap              : register(s9);
sampler   LightMap                   : register(s10);
sampler	  DistortionMap				 : register(s11);

struct PS_INPUT
{
	float2 Texcoord             : TEXCOORD0;
	#ifdef ZESHADER_LIGHTMAP
	float2 LightMapTexcoord     : TEXCOORD1;
	#endif
	#ifdef ZESHADER_REFLECTION
	float3 ReflectionVector     : TEXCOORD3;
	#endif
	#ifdef ZESHADER_REFRACTION
	float3 RefractionVector     : TEXCOORD4;
	#endif
	#ifdef ZESHADER_DISTORTION
	float2 ScreenCoordinates    : TEXCOORD5;
	#endif
};

float4 ps_main(PS_INPUT Input) : COLOR0
{
	float4 OutputColor = float4(0.0f, 0.0f ,0.0f ,1.0f);

	#ifdef ZESHADER_AMBIENT
		OutputColor.rgb += MaterialAmbientColor;
	#endif
	
	#ifdef ZESHADER_EMMISIVE
		#ifdef ZESHADER_EMMISIVEMAP
			OutpuColor.rgb += MaterialEmmisiveColor * tex2D(EmmisiveMap, Input.Texcoord);
		#else
			OutputColor.rgb += MaterialEmmisiveColor;
		#endif
	#endif

	#ifdef ZESHADER_DIFFUSEMAP
		OutputColor.rgb *= tex2D(DiffuseMap, Input.Texcoord).rgb;
	#endif

	#ifdef ZESHADER_LIGHTMAP
		OutputColor.rgb *= float4(tex2D(LightMap, Input.Texcoord).rgb, 1.0f);
	#endif

	#ifdef ZESHADER_REFLECTION
		OutputColor.rgb += MaterialReflectionFactor * texCUBE(EnvironmentMap, normalize(Input.ReflectionVector)).rgb;
	#endif

	#ifdef ZESHADER_REFRACTION
		OutputColor.rgb += MaterialRefractionFactor * texCUBE(EnvironmentMap, normalize(Input.RefractionVector)).rgb;
	#endif
	
	#ifdef ZESHADER_DISTORTION
		float2 DistortionTexCoord = tex2D(DistortionMap, Input.Texcoord);
		OutputColor.rgb += DistortionFactor * tex2D(ScreenMap, ScreenCoordinates + DistortionTexCoord);
	#endif

	#ifdef ZESHADER_OPASITY
		#ifdef ZESHADER_OPACITY_MAP
			#ifdef ZESHADER_OPACITY_CONSTANT
				OutputColor.a = MaterialOpacity * tex2D(OpacityMap, Input.Texcoord).r;
			#else
				OutputColor.a = tex2D(DiffuseMap, Input.Texcoord).r;
			#endif
		#elif defined(ZESHADER_OPACITY_DIFFUSEALPHA
			#ifdef ZESHADER_OPACITY_CONSTANT
				OutputColor.a = MaterialOpacity * tex2D(DiffuseMap, Input.Texcoord).a;
			#else
				OutputColor.a = tex2D(DiffuseMap, Input.Texcoord).a;
			#endif
		#elif 
			OutputColor.a = MaterialOpacity;
		#endif
	#endif

	return OutputColor;
}