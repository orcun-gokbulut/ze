/*ZEHEADER_START*/
//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
//  Core.h - Zinek Engine v0.04.02 Build 905 Source Code                                 
// -------------------------------------------------------------------------------- //
//  Copyright (c) 2007-2008 Zinek Engine group.                                     //
//  All rights reserved.                                                            //
//                                                                                  //
//                 READ TERMS BELLOW BEFORE TAKING ANY ACTION !                     //
//                                                                                  //
//  These coded instructions, statements, and computer programs contain             //
//  unpublished proprietary information written by Zinek Engine group and they are  //
//  protected by international copyright laws. This file is intellectual property   //
//  of the Zinek Engine group and author(s). Storing this file, using this file,    //
//  compiling this file, publishing this file to anykind media or network, editing  //
//  this file, selling this file, reading this file is probited without notice and  //
//  written permision of Y. Orcun Gokbulut. These terms at above can only be        //
//  changed by Y. Orcun GOKBULUT.                                                   //
//  author(s).                                                                      //
//*                                                                                *//
//  DESCRIPTION         :                                                           //
//  AUTHOR(S)           : Y. Orcun GOKBULUT                                         //
//*                                                                                *//
//////////////////////////////////////////////////////////////////////////////////////
/*ZEHEADER_END*/

float4	  MaterialParams0			 : register(c0);
float4	  MaterialParams1			 : register(c1);
float4	  MaterialParams2			 : register(c2);
float4	  MaterialParams3			 : register(c3);
float4	  MaterialParams4			 : register(c4);

#define	  MaterialAmbientColor         MaterialParams0.xyz
#define	  MaterialOpasity			   MaterialParams0.w
#define	  MaterialDiffuseColor         MaterialParams1.xyz
#define	  MaterialSpecularColor        MaterialParams2.xyz
#define	  MaterialSpecularFactor	   MaterialParams2.w
#define	  MaterialEmmisiveColor        MaterialParams3.xyz
#define	  MaterialEmmisiveFactor	   MaterialParams3.w
#define	  MaterialReflectionFactor	   MaterialParams4.x
#define	  MaterialRefractionFactor     MaterialParams4.y;
#define	  MaterialDetailMapTiling      MaterialParams4.zw;

float4    LightColor                 : register(c12);
float     LightIntensity             : register(c13);

sampler   DiffuseMap                 : register(s0);
sampler   NormalMap                  : register(s1);
sampler   SpecularMap                : register(s2);
sampler   EmmisiveMap                : register(s3);
sampler   OpacityMap				 : register(s4);
sampler   DetailMap                  : register(s5);
sampler   EnvironmentMap             : register(s6);
sampler   LightMap                   : register(s7);
sampler   ShadowMap                  : register(s8);
sampler	  ProjectionMap				 : register(s9);

struct PS_INPUT
{
	#ifndef ZESHADER_NORMALMAP
		float3 Normal             : TEXCOORD0;
	#endif

	float2 Texcoord           : TEXCOORD1;
	float3 ViewDirection      : TEXCOORD2;
	float4 LightDirection     : TEXCOORD3;
	float3 CubeTexcoord		  : TEXCOORD4;

	#ifdef ZESHADER_SHADOWMAP
//	float3 ShadowMapCoord     : TEXCOORD4;
	#endif
};

inline void CalculateShadow(in sampler ShadowMap)
{
}

inline void CalculatePointLight(
								in float3 Normal,
								in float3 LightDirectionUN,
								in float  DistanceAttenuation,
								in float3 ViewDirection,
								in float LightIntensity,
								in half3 LightColor,
								in float2 Texcoord,
								inout half3 OutputColor)
{
	float3 LightDirection = normalize(LightDirectionUN);
	float3 HalfVector = normalize(ViewDirection + LightDirection);
	half DiffuseAngularAttenuation = saturate(dot(LightDirection, Normal));
	
	#ifdef ZESHADER_DIFFUSEMAP
		#ifdef ZESHADER_DETAILMAP
			half3 DiffuseColor =  DiffuseAngularAttenuation * MaterialDiffuseColor * tex2D(DiffuseMap, Texcoord) * tex2D(DetailMap, Texcoord * MaterialDetailMapTiling).rgb;
		#else
			half3 DiffuseColor =  DiffuseAngularAttenuation * MaterialDiffuseColor * tex2D(DiffuseMap, Texcoord).rgb;
		#endif
	#else
		#ifdef ZESHADER_DETAILMAP
			half3 DiffuseColor =  DiffuseAngularAttenuation * MaterialDiffuseColor * tex2D(DetailMap, Texcoord * MaterialDetailMapTiling).rgb;
		#else
			half3 DiffuseColor =  DiffuseAngularAttenuation * MaterialDiffuseColor;
		#endif
	#endif

	half SpecularAngularAttenuation = pow(saturate(dot(HalfVector, Normal)), MaterialSpecularFactor);
	#ifdef ZESHADER_SPECULARMAP
		half3 SpecularColor = SpecularAngularAttenuation * MaterialSpecularColor * tex2D(SpecularMap, Texcoord).rgb;
	#else
		half3 SpecularColor = SpecularAngularAttenuation * MaterialSpecularColor;
	#endif

	OutputColor += (DiffuseColor + SpecularColor) * LightColor * (DistanceAttenuation * LightIntensity);
}

half4 ps_main(PS_INPUT Input) : COLOR0
{
	#ifdef ZESHADER_NORMALMAP
		float3 Normal = (2.0f * tex2D(NormalMap, Input.Texcoord).rgb - 1.0f);
	#else
		float3 Normal = normalize(Input.Normal);
	#endif 

	// Transparancy
	#ifdef ZESHADER_OPASITYMAP
		half4 OutputColor = half4(0.0f, 0.0f, 0.0f, MaterialOpasity * tex2D(OpacityMap, Input.Texcoord).r);
	#else
		#ifdef ZESHADER_DIFFUSEMAP
			half4 OutputColor = half4(0.0f, 0.0f, 0.0f, MaterialOpasity * tex2D(DiffuseMap, Input.Texcoord).a);
		#else
			half4 OutputColor = half4(0.0f, 0.0f, 0.0f, MaterialOpasity);
		#endif
	#endif
	
	float3 ViewDirection = normalize(Input.ViewDirection);
	
	CalculatePointLight(Normal, Input.LightDirection.xyz, Input.LightDirection.w, ViewDirection, LightIntensity, LightColor * texCUBE(ProjectionMap, -Input.CubeTexcoord), Input.Texcoord, OutputColor.xyz);
	
	return OutputColor;	
}